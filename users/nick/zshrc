#---------------------------------------------------------------------
# Initialization
#---------------------------------------------------------------------
setopt auto_cd
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushdminus
# setopt VI

#---------------------------------------------------------------------
# Functions
#---------------------------------------------------------------------

# FZF dependent functions START
if [ -x "$(command -v fzf)" ]; then

  # FZF wrapper to set color scheme
  function fzf() {
    ( # run in subshell to not pollute top level shell environment
      if [ "$SHELL" != "/bin/sh" ]; then
        # This file is symlinked to current fzf color scheme
        export FZF_DEFAULT_OPTS_FILE=~/.config/fzf/fzfrc
      fi
      $(whence -p fzf) "$@"
    )
  }

  # FZF key bindings initialization
  eval "$(fzf --zsh)"

  # Lists Developer projects
  list_projects() {
    {
      fd . ~/Developer/*/* -d 1 -t d -E "*/.*"
      fd -t d -H '^.git$' ~/.config --min-depth 2 -x echo {//}
    }
  }

  # Navigate to Developer project
  pro() {
    project="$(list_projects | FZF_DEFAULT_OPTS_FILE=~/.config/fzf/fzfrc fzf -1 -q "$1")"

    if [[ ! -z $project ]]; then
      cd "$project" || exit
    fi
  }

  # Navigate to Developer project and open in nvim
  prov() {
    project="$(list_projects | FZF_DEFAULT_OPTS_FILE=~/.config/fzf/fzfrc fzf -1 -q "$1")"

    if [[ -n $project ]]; then
      if [ -x "$(command -v direnv)" ]; then
        cd "$project" && eval "$(direnv export zsh)" && nvim .
      else
        cd "$project" && nvim .
      fi
    fi
  }

  # Navigate to Developer project and open in tmux
  prot() {
    sessions=$(tmux list-sessions -F "#{session_name}" 2>/dev/null)
    projects=$(list_projects)
    project_options=()
    while read -r project_path; do
      project_path="${project_path%/}"
      project_name=${project_path##*/}
      project_name=${project_name//[:,. ]/____}
      dir=${project_path%/*}
      project_code=${dir##*/}
      project_code=${project_code#"${project_code%%[!0]*}"}
      temp=${dir%/*}
      account_code=${temp##*/}

      session_name="$account_code$project_code $project_name"

      has_session=false
      while read -r session; do
        if [[ "$session" == "$session_name" ]]; then
          has_session=true
          break
        fi
      done <<<"$sessions"

      if [[ "$has_session" == true ]]; then
        project_options+=("$project_path (tmux: $session_name)")
      else
        project_options+=("$project_path")
      fi
    done <<<"$projects"

    selected_project_path="$(printf "%s\n" "${project_options[@]}" |
      FZF_DEFAULT_OPTS_FILE=~/.config/fzf/fzfrc fzf -1 -q "$1")"

    switch_to() {
      if [[ -z "$TMUX" ]]; then
        tmux attach -t "$session_name"
      else
        tmux switchc -t "$session_name"
      fi
    }

    if [[ -n "$selected_project_path" ]]; then
      selected_project_path=$(echo "$selected_project_path" | sed 's/ (.*)\(.*\)$//g')
      project_name=$(basename "$selected_project_path" | tr ":,. " "____")
      project_code=$(dirname "$selected_project_path" | xargs -- basename | sed 's/^0*//')
      account_code=$(dirname "$selected_project_path" | xargs -- dirname | xargs -- basename)

      session_name="$account_code$project_code $project_name"
      if tmux has-session -t="$session_name" 2>/dev/null; then
        switch_to
      else
        tmux new -ds "$session_name" -c "$selected_project_path" -n "$session_name" \; select-pane -t "$session_name":1.1 -T "$session_name"
        tmux send-keys -t "$session_name" "ready-tmux" ^M
        switch_to
      fi
    fi
  }

fi
# FZF dependent functions END

# Configures ls colors
export LSCOLORS="exfxcxdxbxAxAxBxBxExEx"
export LS_COLORS="di=34:ln=35:so=32:pi=33:ex=31:bd=1;30:cd=1;30:su=1;31:sg=1;31:tw=1;34:ow=1;34"

# 1Password plugins initialization
if [ -f ~/.config/op/plugins.sh ]; then
  # shellcheck disable=SC1090
  source ~/.config/op/plugins.sh
fi

# Adds Anthropics API key to environment for avante.nvim
export ANTHROPIC_API_KEY
ANTHROPIC_API_KEY="$(cat /run/secrets/anthropic/api_key)"

# Adds Tavily API key to environment for avante.nvim
export TAVILY_API_KEY
TAVILY_API_KEY="$(cat /run/secrets/tavily/api_key)"

#---------------------------------------------------------------------
# zsh-autocomplete
#---------------------------------------------------------------------
# Currently disabled due to slowness
# setopt interactivecomments
# menu-select-wrap() {
#   zle menu-select
# }
# zle -N menu-select-wrap
#
# # Wrapper to add bindings only in history menu
# wrap(){
#   functions[${1}:old]="$(
#       unfunction "${1}" 2> /dev/null
#       builtin autoload +X -Uz ~autocomplete/Functions/Widgets/"${1}"
#       print -r -- "${functions[${1}]}"
#   )"
#   eval "${1}(){
#     bindkey -M menuselect  '^[[D' ${2}  '^[OD' ${2}
#     bindkey -M menuselect  '^[[C'  ${3}  '^[OC'  ${3}
#     bindkey -M menuselect '\r' ${4}
#     ${1}:old \$@
#   }"
# }
# wrap .autocomplete__history-search__completion-widget .backward-char .forward-char .accept-line
# wrap .autocomplete__complete-word__completion-widget backward-char forward-char accept-line
# unfunction wrap
#
# # bindkey              '^I' menu-select
# # bindkey "${terminfo[kcbt]}" menu-select
# # Uses wrapper to fix issue with zsh-autosuggestions
# bindkey              '^I' menu-select-wrap
# bindkey "${terminfo[kcbt]}" menu-select-wrap
# bindkey -M menuselect              '^I'         menu-complete
# bindkey -M menuselect "${terminfo[kcbt]}" reverse-menu-complete

#---------------------------------------------------------------------
# zsh-autosuggestions
#---------------------------------------------------------------------
export ZSH_AUTOSUGGEST_STRATEGY=(history completion)
# bindkey "^[[A" history-beginning-search-backward
# bindkey "^[[B" history-beginning-search-forward

#---------------------------------------------------------------------
# zsh-history-substring-search
#---------------------------------------------------------------------
export HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND="$(cat ~/.config/zsh-hist-sub/theme)"

# Create a function to update the highlight color without restarting the shell
update_history_highlight() {
  HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND="$(cat ~/.config/zsh-hist-sub/theme)"
}
history-substring-search-up-wrap() {
  update_history_highlight
  zle history-substring-search-up
}
zle -N history-substring-search-up-wrap
history-substring-search-down-wrap() {
  update_history_highlight
  zle history-substring-search-down
}
zle -N history-substring-search-down-wrap
bindkey '^[[A' history-substring-search-up-wrap
bindkey '^[[B' history-substring-search-down-wrap

#---------------------------------------------------------------------
# zsh built-in completion menu
#---------------------------------------------------------------------
# To select previous completion
bindkey '^[[Z' reverse-menu-complete

#---------------------------------------------------------------------
# zsh theme
#---------------------------------------------------------------------
fzf-completion-wrap() {
  # shellcheck disable=SC1090
  [ -f ~/.config/zsh-theme/theme ] && source ~/.config/zsh-theme/theme
  zle fzf-completion
}
zle -N fzf-completion-wrap
bindkey '^I' fzf-completion-wrap

#---------------------------------------------------------------------
# grep theme
#---------------------------------------------------------------------
function grep() {
  ( # run in subshell to not pollute top level shell environment
    if [ "$SHELL" != "/bin/sh" ]; then
      # This file is symlinked to current fzf color scheme
      export GREP_COLORS="$(cat ~/.config/grep/grep-theme)"
    fi
    $(whence -p grep) "$@"
  )
}
