" Shared setting betwen Vim and Ideavim

set title
set titlestring=%{fnamemodify(getcwd(),':t')}%{expand('%:t')!=''?'\ \ –\ '.TitleString():''}
function! TitleString()
    let l:rootPath = resolve(getcwd())
    let l:relativeFilePath = expand('%')
    let l:filePath = expand('%:p')
    let l:fileName = expand('%:t')
    let l:home = $HOME . '/'
    let l:all_files_str = get(g:, 'all_files_str', '')

    if empty(l:all_files_str) " if Neovim defined all_files_str variable
      if l:filePath =~ '^' . l:home && resolve(l:filePath) != l:filePath " if file is in home directory and symlink
          return './' . fnamemodify(l:filePath, ':t')
      else
          return fnamemodify(resolve(l:filePath), ':~:.:h') . '/' . expand('%:t')
      endif
    elseif count(l:all_files_str, l:fileName) > 1 " if other files with same name exist in project
      return fnamemodify(resolve(l:filePath), ':~:.:h') . '/' . expand('%:t')
    elseif count(l:all_files_str, l:fileName) == 0 " if not in project
      if l:relativeFilePath =~ '^term://'
        return "term " . split(l:relativeFilePath, ':')[-1]
      else
        return l:relativeFilePath
      endif
    elseif l:filePath[0:len(l:rootPath)-1] ==# l:rootPath " if file is in root directory
      return l:fileName
    else
      return fnamemodify(resolve(l:filePath), ':~:.:h') . '/' . expand('%:t')
    endif
endfunction
" limit syntax highlighting to columns in case of long lines
set synmaxcol=500

" Spell checking
" set spell
" set spelllang=en_us

" Set <space> as leader key
let mapleader = " "
let maplocalleader = " "

" Enables line numbers
set nu
" Enables relative line numbers
set relativenumber

" Enables mouse reporting (for scrolling and resizing windows with the mouse)
set mouse=a

" Adds yanked text into system's clipboard
" In MacOs and Windows both + and * registers point to system clipboard
" Disabled to keep system clipboard and vim's clipboard separate
" Use special keybindings to copy and paste to system clipboard
" set clipboard^=unnamed,unnamedplus

" Ensures indentation is consistent
if has('linebreak')
  set breakindent
  let &showbreak = '↳ '
  set breakindentopt=shift:0,min:20,sbr
end

" Undo settings
let vimDir = '$HOME/.vim'
if stridx(&runtimepath, expand(vimDir)) == -1
  " vimDir is not on runtimepath, add it
  let &runtimepath.=','.vimDir
endif
" Keep undo history and swap across sessions by storing it in a file
if has('persistent_undo')
  " Keep neovim and vim undo files separate because of incompatibility
  if has('nvim')
    let myUndoDir = expand(vimDir . '/undonvim')
  else
    let myUndoDir = expand(vimDir . '/undovim')
  endif
  let mySwapDir = expand(vimDir . '/swap')
  " Create dirs
  call system('mkdir ' . vimDir)
  call system('mkdir ' . myUndoDir)
  let &undodir = myUndoDir
  let &directory = mySwapDir
  set undofile
  set swapfile
endif

" Search settings
" Case-insensitive searching UNLESS \C or capital in search
set ignorecase
set smartcase
" Highlight search results
set hlsearch
" Incremental search
set incsearch

" Decrease update time
set updatetime=250
set timeoutlen=500

" Ensures splits in right direction
set splitbelow
set splitright

" Sets how vim will display certain whitespace in the editor.
set list
let &listchars="tab:»\ ,space:‧,trail:‧,extends:⟩,nbsp:␣"

" Enables cursor line highlight groups
set cursorline

" Minimal number of screen lines to keep above and below the cursor.
set scrolloff=3

" Set the tab size to 2 spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
" Use spaces instead of tabs
set expandtab

" Indents next line if current is indented
set autoindent

" Soft wrap
set nowrap
set nolinebreak

" Hard wrap
" set textwidth=120

" RGB colors
set termguicolors

set isfname+=@-@

" Adds visual guides
set colorcolumn=80,100,120

" Disable backup files
set nobackup

" Virtual edit
set virtualedit=onemore

" MAPPINGS

" Control what happens to the register when deleting, changing, and pasting
" When deleting string don't add it to the register
nnoremap <leader>d "_d
vnoremap <leader>d "_d
nnoremap <leader>D "_D
vnoremap <leader>D "_D
" When changing string don't add it to the register
nnoremap <leader>c "_c
vnoremap <leader>c "_c
nnoremap <leader>C "_C
vnoremap <leader>C "_C
" When deleting a character don't add it to the register
nnoremap <leader>x "_x
vnoremap <leader>x "_x
" When pasting over a selection don't add selection to the register
xnoremap <leader>p "_dP

" Yank and paste to system clipboard
" Yank to system clipboard
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>Y "+Y
" Paste from system clipboard
" nnoremap <leader>p "+p
nnoremap <leader>P "+P
xnoremap <leader>P "+P

" Move cursor down half a page
" nnoremap <C-d> <C-d>zz
" Move cursor half a page down and centers cursor unless it's end of file then scroll 3
" lines past the end of file
nnoremap <expr> <C-d> (line('$') - line('.') - line('w$') + line('w0')) > 0 ? "\<C-d>zz" : "\<C-d>zb<C-e><C-e><C-e>"
" Move cursor up half page and center window
nnoremap <C-u> <C-u>zz
" Go to next search occurance and center window
nnoremap n nzzzv
" Go to previous search occurance and center window
nnoremap N Nzzzv

" Clear search highlight
nnoremap <Esc> :noh<CR>
" Clear search highlight and delete search history
nnoremap <leader>/c :noh \| let@/ = "" \| call histdel("/", ".*")<CR>

" Code Editing
" Move hightlighted Code
nnoremap <S-Down> :m .+1<CR>==
nnoremap <S-Up> :m .-2<CR>==
inoremap <S-Down> <Esc>:m .+1<CR>==gi
inoremap <S-Up> <Esc>:m .-2<CR>==gi
vnoremap <S-Down> :m '>+1<CR>gv=gv
vnoremap <S-Up> :m '<-2<CR>gv=gv
" Find and Replace currently selected text
vnoremap <leader>hfr "hy:%s/<C-r>h/<C-r>h/gci<left><left><left><left>


" Netrw
let g:window_id_before_netrw = v:null

" File Browser toggle and keep its width consistent
function! ToggleVimExplorer()
  " ID of the window before the switch to netrw
  let g:window_id_before_netrw = win_getid()
  if exists("t:expl_buf_num")
      call s:CloseNetrw()
  else
      exec '1wincmd w'
      Lexplore
      " After switching to netwr buff, lets resize to 45
      vertical resize 45
      let t:expl_buf_num = bufnr("%")
  endif
endfunction

nmap <leader>fb :call ToggleVimExplorer()<CR>

function! s:CloseNetrw() abort
  for bufn in range(1, bufnr('$'))
    if bufexists(bufn) && getbufvar(bufn, '&filetype') ==# 'netrw'
      if exists("t:expl_buf_num")
        unlet t:expl_buf_num
      endif
      silent! execute 'bwipeout ' . bufn
      if getline(2) =~# '^" Netrw '
        silent! bwipeout
      endif
      " Switch to previous window
      if g:window_id_before_netrw != v:null
        call win_gotoid(g:window_id_before_netrw)
        let g:window_id_before_netrw = v:null
      endif
      return
    endif
  endfor
endfunction

command! CloseNetrw call s:CloseNetrw()

function! NetrwMapping()
  nnoremap <buffer><silent> <Esc> :call <SID>CloseNetrw()<CR>
  nnoremap <buffer><silent> <q> :call <SID>CloseNetrw()<CR>

    let g:netrw_banner = 0 " remove the banner at the top
    let g:netrw_preview = 1
    let g:netrw_liststyle = 3  " default directory view. Cycle with i
endfunction

augroup netrw_mapping
    autocmd!
    autocmd FileType netrw call NetrwMapping()
augroup END

" Close Netrw when selecting a file
augroup close_on_open
  autocmd!
  autocmd BufWinEnter * if getbufvar(winbufnr(winnr()), "&filetype") != "netrw"|call <SID>CloseNetrw()|endif
  " autocmd FileType netrw autocmd BufLeave <buffer> if &filetype == 'netrw' |call <SID>CloseNetrw()|endif
aug END


" Help window mappings

" Close help with q or escape
augroup help
  autocmd!
  autocmd FileType help nnoremap <buffer><silent> q :q<CR>
  autocmd FileType help nnoremap <buffer><silent> <Esc> :q<CR>
augroup END

